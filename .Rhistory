setwd("~/OneDrive - London School of Hygiene and Tropical Medicine/Kleb_sero_outputs/KlebSero_paper")
##------------------------------------------------------------------------------
#
#   Model Run File
#
##------------------------------------------------------------------------------
# Load required packages
library(brms)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggrepel)
library(tibble)
library(stringr)
library(tidyverse)
## SECTION ONE: Data preparation -----------------------------------------------
# Part A:
all_files <- list.files(path = "data_core/", recursive = TRUE) # or "data_LOO/"
all_files <- all_files[all_files != "site_info.csv"]
print(all_files)
pattern <- "^(Full|Carba|ESBL|Fatal)_(ALL|min10)_Neonatal_shareable_\\d{8}_(28|365)_filterN10_(K|O|OlocusType)_site_counts_all\\.csv$"
# 2) Identify files that do NOT match
bad_files <- all_files[!grepl(pattern, all_files)]
# 3) If the vector of bad_files is non-empty, flag them. Otherwise, confirm all okay.
if (length(bad_files) > 0) {
warning("The following files do not match the required format:\n",
paste(bad_files, collapse = "\n"))
} else {
message("All files match the required format.")
}
## PLACEHOLDER TO TEST
all_files <- all_files[1]
all_files
i
i = 1
# File name for this loop
filename <- all_files[i]
# Extract metadata from the filename using regex patterns
subset     <- str_extract(filename, "^(Full|Carba|ESBL|Fatal)")
purpose    <- ifelse(str_detect(filename, "shareable"), "core", "LOO")
purpose
all_files <- list.files(path = "data_LOO/", recursive = TRUE) # or "data_LOO/"
all_files <- all_files[all_files != "site_info.csv"]
print(all_files)
pattern <- "^(Full|Carba|ESBL|Fatal)_(ALL|min10)_Neonatal_shareable_\\d{8}_(28|365)_filterN10_(K|O|OlocusType)_site_counts_all\\.csv$"
# 2) Identify files that do NOT match
bad_files <- all_files[!grepl(pattern, all_files)]
# 3) If the vector of bad_files is non-empty, flag them. Otherwise, confirm all okay.
if (length(bad_files) > 0) {
warning("The following files do not match the required format:\n",
paste(bad_files, collapse = "\n"))
} else {
message("All files match the required format.")
}
## PLACEHOLDER TO TEST
all_files <- all_files[1]
i = 1
# File name for this loop
filename <- all_files[i]
# Extract metadata from the filename using regex patterns
subset     <- str_extract(filename, "^(Full|Carba|ESBL|Fatal)")
purpose    <- ifelse(str_detect(filename, "shareable"), "core", "LOO")
purpose
##------------------------------------------------------------------------------
#
#   Model Run File
#
##------------------------------------------------------------------------------
# Load required packages
library(brms)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggrepel)
library(tibble)
library(stringr)
library(tidyverse)
## SECTION ONE: Data preparation -----------------------------------------------
# Part A:
all_files <- list.files(path = "data_LOO/", recursive = TRUE) # or "data_LOO/"
all_files <- all_files[all_files != "site_info.csv"]
print(all_files)
pattern <- "^(Full|Carba|ESBL|Fatal)_(ALL|min10)_Neonatal_shareable_\\d{8}_(28|365)_filterN10_(K|O|OlocusType)_site_counts_all\\.csv$"
# 2) Identify files that do NOT match
bad_files <- all_files[!grepl(pattern, all_files)]
# 3) If the vector of bad_files is non-empty, flag them. Otherwise, confirm all okay.
if (length(bad_files) > 0) {
warning("The following files do not match the required format:\n",
paste(bad_files, collapse = "\n"))
} else {
message("All files match the required format.")
}
## PLACEHOLDER TO TEST
all_files <- all_files[1]
# File name for this loop
filename <- all_files[i]
# Extract metadata from the filename using regex patterns
subset     <- str_extract(filename, "^(Full|Carba|ESBL|Fatal)")
purpose    <- ifelse(str_detect(filename, "LOO"), "LOO", "core")
purpose
all_files <- list.files(path = "data_core/", recursive = TRUE) # or "data_LOO/"
all_files <- all_files[all_files != "site_info.csv"]
print(all_files)
pattern <- "^(Full|Carba|ESBL|Fatal)_(ALL|min10)_Neonatal_shareable_\\d{8}_(28|365)_filterN10_(K|O|OlocusType)_site_counts_all\\.csv$"
# 2) Identify files that do NOT match
bad_files <- all_files[!grepl(pattern, all_files)]
# 3) If the vector of bad_files is non-empty, flag them. Otherwise, confirm all okay.
if (length(bad_files) > 0) {
warning("The following files do not match the required format:\n",
paste(bad_files, collapse = "\n"))
} else {
message("All files match the required format.")
}
## PLACEHOLDER TO TEST
all_files <- all_files[1]
all_files
# File name for this loop
filename <- all_files[i]
# Extract metadata from the filename using regex patterns
subset     <- str_extract(filename, "^(Full|Carba|ESBL|Fatal)")
purpose    <- ifelse(str_detect(filename, "LOO"), "LOO", "core")
purpose
